// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: TournamentProto.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from TournamentProto.proto</summary>
public static partial class TournamentProtoReflection {

  #region Descriptor
  /// <summary>File descriptor for TournamentProto.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static TournamentProtoReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChVUb3VybmFtZW50UHJvdG8ucHJvdG8iswIKD1RvdXJuYW1lbnRQcm90bxIs",
          "Cg5yb29tVG91cm5hbWVudBgBIAMoCzIULlJvb21Ub3VybmFtZW50UHJvdG8S",
          "EwoLZ3JvdXBSb29tSWQYAiABKAkSDQoFcm91bmQYAyABKAUSIQoGcmV3YXJk",
          "GAQgAygLMhEuUmV3YXJkVG91cm5hbWVudBIQCgh0eXBlTW9kZRgFIAEoBRIS",
          "Cgp0b3RhbFJvdW5kGAYgASgFEg4KBnJlc3VsdBgHIAEoBRIPCgdlbmRUaW1l",
          "GAggASgDEhcKD21pbmlHYW1lRXZlbnRJZBgJIAEoAxIRCgl0b3RhbFJvb20Y",
          "CiABKAUSDQoFaXNFbmQYCyABKAgSEQoJaXNFbmRUaW1lGAwgASgFEhYKDm5h",
          "bWVUb3VybmFtZW50GA0gASgJIoUBChNSb29tVG91cm5hbWVudFByb3RvEg0K",
          "BXJvdW5kGAEgASgFEhAKCHBvc2l0aW9uGAIgASgFEh0KBHVzZXIYAyADKAsy",
          "Dy5Vc2VyVG91cm5hbWVudBIOCgZyb29tSWQYBCABKAkSDgoGc3RhdHVzGAUg",
          "ASgFEg4KBmlzUGxheRgGIAEoBSKrAQoOVXNlclRvdXJuYW1lbnQSEgoKdXNl",
          "ckNvZGVJZBgBIAEoCRIQCgh1c2VybmFtZRgCIAEoCRIOCgZhdmF0YXIYAyAB",
          "KAkSDgoGc3RhdHVzGAQgASgFEg0KBXBvaW50GAUgASgFEhAKCHBvc2l0aW9u",
          "GAYgASgFEg4KBnVzZXJJZBgHIAEoAxIOCgZyZXN1bHQYCCABKAUSEgoKcGxh",
          "eVN0YXR1cxgJIAEoBSJIChBSZXdhcmRUb3VybmFtZW50EhAKCHBvc2l0aW9u",
          "GAEgASgFEg4KBnJld2FyZBgCIAEoAxISCgp0eXBlUmV3YXJkGAMgASgFYgZw",
          "cm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::TournamentProto), global::TournamentProto.Parser, new[]{ "RoomTournament", "GroupRoomId", "Round", "Reward", "TypeMode", "TotalRound", "Result", "EndTime", "MiniGameEventId", "TotalRoom", "IsEnd", "IsEndTime", "NameTournament" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RoomTournamentProto), global::RoomTournamentProto.Parser, new[]{ "Round", "Position", "User", "RoomId", "Status", "IsPlay" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UserTournament), global::UserTournament.Parser, new[]{ "UserCodeId", "Username", "Avatar", "Status", "Point", "Position", "UserId", "Result", "PlayStatus" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RewardTournament), global::RewardTournament.Parser, new[]{ "Position", "Reward", "TypeReward" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class TournamentProto : pb::IMessage<TournamentProto>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<TournamentProto> _parser = new pb::MessageParser<TournamentProto>(() => new TournamentProto());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<TournamentProto> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TournamentProtoReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public TournamentProto() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public TournamentProto(TournamentProto other) : this() {
    roomTournament_ = other.roomTournament_.Clone();
    groupRoomId_ = other.groupRoomId_;
    round_ = other.round_;
    reward_ = other.reward_.Clone();
    typeMode_ = other.typeMode_;
    totalRound_ = other.totalRound_;
    result_ = other.result_;
    endTime_ = other.endTime_;
    miniGameEventId_ = other.miniGameEventId_;
    totalRoom_ = other.totalRoom_;
    isEnd_ = other.isEnd_;
    isEndTime_ = other.isEndTime_;
    nameTournament_ = other.nameTournament_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public TournamentProto Clone() {
    return new TournamentProto(this);
  }

  /// <summary>Field number for the "roomTournament" field.</summary>
  public const int RoomTournamentFieldNumber = 1;
  private static readonly pb::FieldCodec<global::RoomTournamentProto> _repeated_roomTournament_codec
      = pb::FieldCodec.ForMessage(10, global::RoomTournamentProto.Parser);
  private readonly pbc::RepeatedField<global::RoomTournamentProto> roomTournament_ = new pbc::RepeatedField<global::RoomTournamentProto>();
  /// <summary>
  /// List Room in tournament
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::RoomTournamentProto> RoomTournament {
    get { return roomTournament_; }
  }

  /// <summary>Field number for the "groupRoomId" field.</summary>
  public const int GroupRoomIdFieldNumber = 2;
  private string groupRoomId_ = "";
  /// <summary>
  /// id of tournament
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string GroupRoomId {
    get { return groupRoomId_; }
    set {
      groupRoomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "round" field.</summary>
  public const int RoundFieldNumber = 3;
  private int round_;
  /// <summary>
  /// current round of user
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Round {
    get { return round_; }
    set {
      round_ = value;
    }
  }

  /// <summary>Field number for the "reward" field.</summary>
  public const int RewardFieldNumber = 4;
  private static readonly pb::FieldCodec<global::RewardTournament> _repeated_reward_codec
      = pb::FieldCodec.ForMessage(34, global::RewardTournament.Parser);
  private readonly pbc::RepeatedField<global::RewardTournament> reward_ = new pbc::RepeatedField<global::RewardTournament>();
  /// <summary>
  /// list reward for top ranking user
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::RewardTournament> Reward {
    get { return reward_; }
  }

  /// <summary>Field number for the "typeMode" field.</summary>
  public const int TypeModeFieldNumber = 5;
  private int typeMode_;
  /// <summary>
  /// type tournament , 1 -  head_to_head, 2 - knock_out, 3 -  round_robin, 4 - one_to_many
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int TypeMode {
    get { return typeMode_; }
    set {
      typeMode_ = value;
    }
  }

  /// <summary>Field number for the "totalRound" field.</summary>
  public const int TotalRoundFieldNumber = 6;
  private int totalRound_;
  /// <summary>
  /// tổng số round
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int TotalRound {
    get { return totalRound_; }
    set {
      totalRound_ = value;
    }
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 7;
  private int result_;
  /// <summary>
  /// 2 -  thất bại và không được chơi tiếp, 1 - thắng và được tiếp tục vào round tiếp theo
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "endTime" field.</summary>
  public const int EndTimeFieldNumber = 8;
  private long endTime_;
  /// <summary>
  /// time left - số giây còn lại để kết thúc round -> Khi kết thúc round thì không hiển thị nút play next now
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long EndTime {
    get { return endTime_; }
    set {
      endTime_ = value;
    }
  }

  /// <summary>Field number for the "miniGameEventId" field.</summary>
  public const int MiniGameEventIdFieldNumber = 9;
  private long miniGameEventId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long MiniGameEventId {
    get { return miniGameEventId_; }
    set {
      miniGameEventId_ = value;
    }
  }

  /// <summary>Field number for the "totalRoom" field.</summary>
  public const int TotalRoomFieldNumber = 10;
  private int totalRoom_;
  /// <summary>
  /// tổng phòng có trong tournament
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int TotalRoom {
    get { return totalRoom_; }
    set {
      totalRoom_ = value;
    }
  }

  /// <summary>Field number for the "isEnd" field.</summary>
  public const int IsEndFieldNumber = 11;
  private bool isEnd_;
  /// <summary>
  /// true - tournament đã kết thúc, false - tournament vẫn đang diễn ra
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsEnd {
    get { return isEnd_; }
    set {
      isEnd_ = value;
    }
  }

  /// <summary>Field number for the "isEndTime" field.</summary>
  public const int IsEndTimeFieldNumber = 12;
  private int isEndTime_;
  /// <summary>
  /// 1 - co endTime, 2 - khong co endTime
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int IsEndTime {
    get { return isEndTime_; }
    set {
      isEndTime_ = value;
    }
  }

  /// <summary>Field number for the "nameTournament" field.</summary>
  public const int NameTournamentFieldNumber = 13;
  private string nameTournament_ = "";
  /// <summary>
  /// name of tournament
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string NameTournament {
    get { return nameTournament_; }
    set {
      nameTournament_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as TournamentProto);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(TournamentProto other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!roomTournament_.Equals(other.roomTournament_)) return false;
    if (GroupRoomId != other.GroupRoomId) return false;
    if (Round != other.Round) return false;
    if(!reward_.Equals(other.reward_)) return false;
    if (TypeMode != other.TypeMode) return false;
    if (TotalRound != other.TotalRound) return false;
    if (Result != other.Result) return false;
    if (EndTime != other.EndTime) return false;
    if (MiniGameEventId != other.MiniGameEventId) return false;
    if (TotalRoom != other.TotalRoom) return false;
    if (IsEnd != other.IsEnd) return false;
    if (IsEndTime != other.IsEndTime) return false;
    if (NameTournament != other.NameTournament) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= roomTournament_.GetHashCode();
    if (GroupRoomId.Length != 0) hash ^= GroupRoomId.GetHashCode();
    if (Round != 0) hash ^= Round.GetHashCode();
    hash ^= reward_.GetHashCode();
    if (TypeMode != 0) hash ^= TypeMode.GetHashCode();
    if (TotalRound != 0) hash ^= TotalRound.GetHashCode();
    if (Result != 0) hash ^= Result.GetHashCode();
    if (EndTime != 0L) hash ^= EndTime.GetHashCode();
    if (MiniGameEventId != 0L) hash ^= MiniGameEventId.GetHashCode();
    if (TotalRoom != 0) hash ^= TotalRoom.GetHashCode();
    if (IsEnd != false) hash ^= IsEnd.GetHashCode();
    if (IsEndTime != 0) hash ^= IsEndTime.GetHashCode();
    if (NameTournament.Length != 0) hash ^= NameTournament.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    roomTournament_.WriteTo(output, _repeated_roomTournament_codec);
    if (GroupRoomId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(GroupRoomId);
    }
    if (Round != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Round);
    }
    reward_.WriteTo(output, _repeated_reward_codec);
    if (TypeMode != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(TypeMode);
    }
    if (TotalRound != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(TotalRound);
    }
    if (Result != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(Result);
    }
    if (EndTime != 0L) {
      output.WriteRawTag(64);
      output.WriteInt64(EndTime);
    }
    if (MiniGameEventId != 0L) {
      output.WriteRawTag(72);
      output.WriteInt64(MiniGameEventId);
    }
    if (TotalRoom != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(TotalRoom);
    }
    if (IsEnd != false) {
      output.WriteRawTag(88);
      output.WriteBool(IsEnd);
    }
    if (IsEndTime != 0) {
      output.WriteRawTag(96);
      output.WriteInt32(IsEndTime);
    }
    if (NameTournament.Length != 0) {
      output.WriteRawTag(106);
      output.WriteString(NameTournament);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    roomTournament_.WriteTo(ref output, _repeated_roomTournament_codec);
    if (GroupRoomId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(GroupRoomId);
    }
    if (Round != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Round);
    }
    reward_.WriteTo(ref output, _repeated_reward_codec);
    if (TypeMode != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(TypeMode);
    }
    if (TotalRound != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(TotalRound);
    }
    if (Result != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(Result);
    }
    if (EndTime != 0L) {
      output.WriteRawTag(64);
      output.WriteInt64(EndTime);
    }
    if (MiniGameEventId != 0L) {
      output.WriteRawTag(72);
      output.WriteInt64(MiniGameEventId);
    }
    if (TotalRoom != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(TotalRoom);
    }
    if (IsEnd != false) {
      output.WriteRawTag(88);
      output.WriteBool(IsEnd);
    }
    if (IsEndTime != 0) {
      output.WriteRawTag(96);
      output.WriteInt32(IsEndTime);
    }
    if (NameTournament.Length != 0) {
      output.WriteRawTag(106);
      output.WriteString(NameTournament);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    size += roomTournament_.CalculateSize(_repeated_roomTournament_codec);
    if (GroupRoomId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupRoomId);
    }
    if (Round != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Round);
    }
    size += reward_.CalculateSize(_repeated_reward_codec);
    if (TypeMode != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TypeMode);
    }
    if (TotalRound != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalRound);
    }
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (EndTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
    }
    if (MiniGameEventId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(MiniGameEventId);
    }
    if (TotalRoom != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalRoom);
    }
    if (IsEnd != false) {
      size += 1 + 1;
    }
    if (IsEndTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsEndTime);
    }
    if (NameTournament.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(NameTournament);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(TournamentProto other) {
    if (other == null) {
      return;
    }
    roomTournament_.Add(other.roomTournament_);
    if (other.GroupRoomId.Length != 0) {
      GroupRoomId = other.GroupRoomId;
    }
    if (other.Round != 0) {
      Round = other.Round;
    }
    reward_.Add(other.reward_);
    if (other.TypeMode != 0) {
      TypeMode = other.TypeMode;
    }
    if (other.TotalRound != 0) {
      TotalRound = other.TotalRound;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.EndTime != 0L) {
      EndTime = other.EndTime;
    }
    if (other.MiniGameEventId != 0L) {
      MiniGameEventId = other.MiniGameEventId;
    }
    if (other.TotalRoom != 0) {
      TotalRoom = other.TotalRoom;
    }
    if (other.IsEnd != false) {
      IsEnd = other.IsEnd;
    }
    if (other.IsEndTime != 0) {
      IsEndTime = other.IsEndTime;
    }
    if (other.NameTournament.Length != 0) {
      NameTournament = other.NameTournament;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          roomTournament_.AddEntriesFrom(input, _repeated_roomTournament_codec);
          break;
        }
        case 18: {
          GroupRoomId = input.ReadString();
          break;
        }
        case 24: {
          Round = input.ReadInt32();
          break;
        }
        case 34: {
          reward_.AddEntriesFrom(input, _repeated_reward_codec);
          break;
        }
        case 40: {
          TypeMode = input.ReadInt32();
          break;
        }
        case 48: {
          TotalRound = input.ReadInt32();
          break;
        }
        case 56: {
          Result = input.ReadInt32();
          break;
        }
        case 64: {
          EndTime = input.ReadInt64();
          break;
        }
        case 72: {
          MiniGameEventId = input.ReadInt64();
          break;
        }
        case 80: {
          TotalRoom = input.ReadInt32();
          break;
        }
        case 88: {
          IsEnd = input.ReadBool();
          break;
        }
        case 96: {
          IsEndTime = input.ReadInt32();
          break;
        }
        case 106: {
          NameTournament = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          roomTournament_.AddEntriesFrom(ref input, _repeated_roomTournament_codec);
          break;
        }
        case 18: {
          GroupRoomId = input.ReadString();
          break;
        }
        case 24: {
          Round = input.ReadInt32();
          break;
        }
        case 34: {
          reward_.AddEntriesFrom(ref input, _repeated_reward_codec);
          break;
        }
        case 40: {
          TypeMode = input.ReadInt32();
          break;
        }
        case 48: {
          TotalRound = input.ReadInt32();
          break;
        }
        case 56: {
          Result = input.ReadInt32();
          break;
        }
        case 64: {
          EndTime = input.ReadInt64();
          break;
        }
        case 72: {
          MiniGameEventId = input.ReadInt64();
          break;
        }
        case 80: {
          TotalRoom = input.ReadInt32();
          break;
        }
        case 88: {
          IsEnd = input.ReadBool();
          break;
        }
        case 96: {
          IsEndTime = input.ReadInt32();
          break;
        }
        case 106: {
          NameTournament = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class RoomTournamentProto : pb::IMessage<RoomTournamentProto>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<RoomTournamentProto> _parser = new pb::MessageParser<RoomTournamentProto>(() => new RoomTournamentProto());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<RoomTournamentProto> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TournamentProtoReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public RoomTournamentProto() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public RoomTournamentProto(RoomTournamentProto other) : this() {
    round_ = other.round_;
    position_ = other.position_;
    user_ = other.user_.Clone();
    roomId_ = other.roomId_;
    status_ = other.status_;
    isPlay_ = other.isPlay_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public RoomTournamentProto Clone() {
    return new RoomTournamentProto(this);
  }

  /// <summary>Field number for the "round" field.</summary>
  public const int RoundFieldNumber = 1;
  private int round_;
  /// <summary>
  /// round of room
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Round {
    get { return round_; }
    set {
      round_ = value;
    }
  }

  /// <summary>Field number for the "position" field.</summary>
  public const int PositionFieldNumber = 2;
  private int position_;
  /// <summary>
  /// position of room
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Position {
    get { return position_; }
    set {
      position_ = value;
    }
  }

  /// <summary>Field number for the "user" field.</summary>
  public const int UserFieldNumber = 3;
  private static readonly pb::FieldCodec<global::UserTournament> _repeated_user_codec
      = pb::FieldCodec.ForMessage(26, global::UserTournament.Parser);
  private readonly pbc::RepeatedField<global::UserTournament> user_ = new pbc::RepeatedField<global::UserTournament>();
  /// <summary>
  /// list user in room
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::UserTournament> User {
    get { return user_; }
  }

  /// <summary>Field number for the "roomId" field.</summary>
  public const int RoomIdFieldNumber = 4;
  private string roomId_ = "";
  /// <summary>
  /// this room id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string RoomId {
    get { return roomId_; }
    set {
      roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 5;
  private int status_;
  /// <summary>
  /// 1 - inprocess, 2 -waitting, 3-completed, 4-cancel
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "isPlay" field.</summary>
  public const int IsPlayFieldNumber = 6;
  private int isPlay_;
  /// <summary>
  /// 1 - không hiển thị kiếm, 2 - hiển thị kiếm nhưng không được phép chơi, 3 - hiển thị kiếm và được phép chơi
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int IsPlay {
    get { return isPlay_; }
    set {
      isPlay_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as RoomTournamentProto);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(RoomTournamentProto other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Round != other.Round) return false;
    if (Position != other.Position) return false;
    if(!user_.Equals(other.user_)) return false;
    if (RoomId != other.RoomId) return false;
    if (Status != other.Status) return false;
    if (IsPlay != other.IsPlay) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (Round != 0) hash ^= Round.GetHashCode();
    if (Position != 0) hash ^= Position.GetHashCode();
    hash ^= user_.GetHashCode();
    if (RoomId.Length != 0) hash ^= RoomId.GetHashCode();
    if (Status != 0) hash ^= Status.GetHashCode();
    if (IsPlay != 0) hash ^= IsPlay.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (Round != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Round);
    }
    if (Position != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Position);
    }
    user_.WriteTo(output, _repeated_user_codec);
    if (RoomId.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(RoomId);
    }
    if (Status != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Status);
    }
    if (IsPlay != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(IsPlay);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (Round != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Round);
    }
    if (Position != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Position);
    }
    user_.WriteTo(ref output, _repeated_user_codec);
    if (RoomId.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(RoomId);
    }
    if (Status != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Status);
    }
    if (IsPlay != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(IsPlay);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (Round != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Round);
    }
    if (Position != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Position);
    }
    size += user_.CalculateSize(_repeated_user_codec);
    if (RoomId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
    }
    if (Status != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
    }
    if (IsPlay != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsPlay);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(RoomTournamentProto other) {
    if (other == null) {
      return;
    }
    if (other.Round != 0) {
      Round = other.Round;
    }
    if (other.Position != 0) {
      Position = other.Position;
    }
    user_.Add(other.user_);
    if (other.RoomId.Length != 0) {
      RoomId = other.RoomId;
    }
    if (other.Status != 0) {
      Status = other.Status;
    }
    if (other.IsPlay != 0) {
      IsPlay = other.IsPlay;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Round = input.ReadInt32();
          break;
        }
        case 16: {
          Position = input.ReadInt32();
          break;
        }
        case 26: {
          user_.AddEntriesFrom(input, _repeated_user_codec);
          break;
        }
        case 34: {
          RoomId = input.ReadString();
          break;
        }
        case 40: {
          Status = input.ReadInt32();
          break;
        }
        case 48: {
          IsPlay = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Round = input.ReadInt32();
          break;
        }
        case 16: {
          Position = input.ReadInt32();
          break;
        }
        case 26: {
          user_.AddEntriesFrom(ref input, _repeated_user_codec);
          break;
        }
        case 34: {
          RoomId = input.ReadString();
          break;
        }
        case 40: {
          Status = input.ReadInt32();
          break;
        }
        case 48: {
          IsPlay = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class UserTournament : pb::IMessage<UserTournament>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<UserTournament> _parser = new pb::MessageParser<UserTournament>(() => new UserTournament());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<UserTournament> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TournamentProtoReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public UserTournament() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public UserTournament(UserTournament other) : this() {
    userCodeId_ = other.userCodeId_;
    username_ = other.username_;
    avatar_ = other.avatar_;
    status_ = other.status_;
    point_ = other.point_;
    position_ = other.position_;
    userId_ = other.userId_;
    result_ = other.result_;
    playStatus_ = other.playStatus_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public UserTournament Clone() {
    return new UserTournament(this);
  }

  /// <summary>Field number for the "userCodeId" field.</summary>
  public const int UserCodeIdFieldNumber = 1;
  private string userCodeId_ = "";
  /// <summary>
  /// infor user
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string UserCodeId {
    get { return userCodeId_; }
    set {
      userCodeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "username" field.</summary>
  public const int UsernameFieldNumber = 2;
  private string username_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Username {
    get { return username_; }
    set {
      username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "avatar" field.</summary>
  public const int AvatarFieldNumber = 3;
  private string avatar_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Avatar {
    get { return avatar_; }
    set {
      avatar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 4;
  private int status_;
  /// <summary>
  /// 1 - active, 2- banned,  3 - resigned, 4- delete
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "point" field.</summary>
  public const int PointFieldNumber = 5;
  private int point_;
  /// <summary>
  /// điểm số
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Point {
    get { return point_; }
    set {
      point_ = value;
    }
  }

  /// <summary>Field number for the "position" field.</summary>
  public const int PositionFieldNumber = 6;
  private int position_;
  /// <summary>
  /// 1 - first, 2 -second          
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Position {
    get { return position_; }
    set {
      position_ = value;
    }
  }

  /// <summary>Field number for the "userId" field.</summary>
  public const int UserIdFieldNumber = 7;
  private long userId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 8;
  private int result_;
  /// <summary>
  /// 1 - lose, 2 - win
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "playStatus" field.</summary>
  public const int PlayStatusFieldNumber = 9;
  private int playStatus_;
  /// <summary>
  /// 1 - yet to play, 2 - playing now
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int PlayStatus {
    get { return playStatus_; }
    set {
      playStatus_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as UserTournament);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(UserTournament other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserCodeId != other.UserCodeId) return false;
    if (Username != other.Username) return false;
    if (Avatar != other.Avatar) return false;
    if (Status != other.Status) return false;
    if (Point != other.Point) return false;
    if (Position != other.Position) return false;
    if (UserId != other.UserId) return false;
    if (Result != other.Result) return false;
    if (PlayStatus != other.PlayStatus) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (UserCodeId.Length != 0) hash ^= UserCodeId.GetHashCode();
    if (Username.Length != 0) hash ^= Username.GetHashCode();
    if (Avatar.Length != 0) hash ^= Avatar.GetHashCode();
    if (Status != 0) hash ^= Status.GetHashCode();
    if (Point != 0) hash ^= Point.GetHashCode();
    if (Position != 0) hash ^= Position.GetHashCode();
    if (UserId != 0L) hash ^= UserId.GetHashCode();
    if (Result != 0) hash ^= Result.GetHashCode();
    if (PlayStatus != 0) hash ^= PlayStatus.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (UserCodeId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(UserCodeId);
    }
    if (Username.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Username);
    }
    if (Avatar.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Avatar);
    }
    if (Status != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Status);
    }
    if (Point != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Point);
    }
    if (Position != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(Position);
    }
    if (UserId != 0L) {
      output.WriteRawTag(56);
      output.WriteInt64(UserId);
    }
    if (Result != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(Result);
    }
    if (PlayStatus != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(PlayStatus);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (UserCodeId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(UserCodeId);
    }
    if (Username.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Username);
    }
    if (Avatar.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Avatar);
    }
    if (Status != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Status);
    }
    if (Point != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Point);
    }
    if (Position != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(Position);
    }
    if (UserId != 0L) {
      output.WriteRawTag(56);
      output.WriteInt64(UserId);
    }
    if (Result != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(Result);
    }
    if (PlayStatus != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(PlayStatus);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (UserCodeId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(UserCodeId);
    }
    if (Username.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
    }
    if (Avatar.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Avatar);
    }
    if (Status != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
    }
    if (Point != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Point);
    }
    if (Position != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Position);
    }
    if (UserId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
    }
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (PlayStatus != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayStatus);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(UserTournament other) {
    if (other == null) {
      return;
    }
    if (other.UserCodeId.Length != 0) {
      UserCodeId = other.UserCodeId;
    }
    if (other.Username.Length != 0) {
      Username = other.Username;
    }
    if (other.Avatar.Length != 0) {
      Avatar = other.Avatar;
    }
    if (other.Status != 0) {
      Status = other.Status;
    }
    if (other.Point != 0) {
      Point = other.Point;
    }
    if (other.Position != 0) {
      Position = other.Position;
    }
    if (other.UserId != 0L) {
      UserId = other.UserId;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.PlayStatus != 0) {
      PlayStatus = other.PlayStatus;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          UserCodeId = input.ReadString();
          break;
        }
        case 18: {
          Username = input.ReadString();
          break;
        }
        case 26: {
          Avatar = input.ReadString();
          break;
        }
        case 32: {
          Status = input.ReadInt32();
          break;
        }
        case 40: {
          Point = input.ReadInt32();
          break;
        }
        case 48: {
          Position = input.ReadInt32();
          break;
        }
        case 56: {
          UserId = input.ReadInt64();
          break;
        }
        case 64: {
          Result = input.ReadInt32();
          break;
        }
        case 72: {
          PlayStatus = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          UserCodeId = input.ReadString();
          break;
        }
        case 18: {
          Username = input.ReadString();
          break;
        }
        case 26: {
          Avatar = input.ReadString();
          break;
        }
        case 32: {
          Status = input.ReadInt32();
          break;
        }
        case 40: {
          Point = input.ReadInt32();
          break;
        }
        case 48: {
          Position = input.ReadInt32();
          break;
        }
        case 56: {
          UserId = input.ReadInt64();
          break;
        }
        case 64: {
          Result = input.ReadInt32();
          break;
        }
        case 72: {
          PlayStatus = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class RewardTournament : pb::IMessage<RewardTournament>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<RewardTournament> _parser = new pb::MessageParser<RewardTournament>(() => new RewardTournament());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<RewardTournament> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TournamentProtoReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public RewardTournament() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public RewardTournament(RewardTournament other) : this() {
    position_ = other.position_;
    reward_ = other.reward_;
    typeReward_ = other.typeReward_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public RewardTournament Clone() {
    return new RewardTournament(this);
  }

  /// <summary>Field number for the "position" field.</summary>
  public const int PositionFieldNumber = 1;
  private int position_;
  /// <summary>
  /// rank user
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Position {
    get { return position_; }
    set {
      position_ = value;
    }
  }

  /// <summary>Field number for the "reward" field.</summary>
  public const int RewardFieldNumber = 2;
  private long reward_;
  /// <summary>
  /// reward
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Reward {
    get { return reward_; }
    set {
      reward_ = value;
    }
  }

  /// <summary>Field number for the "typeReward" field.</summary>
  public const int TypeRewardFieldNumber = 3;
  private int typeReward_;
  /// <summary>
  /// type reward
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int TypeReward {
    get { return typeReward_; }
    set {
      typeReward_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as RewardTournament);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(RewardTournament other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Position != other.Position) return false;
    if (Reward != other.Reward) return false;
    if (TypeReward != other.TypeReward) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (Position != 0) hash ^= Position.GetHashCode();
    if (Reward != 0L) hash ^= Reward.GetHashCode();
    if (TypeReward != 0) hash ^= TypeReward.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (Position != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Position);
    }
    if (Reward != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(Reward);
    }
    if (TypeReward != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(TypeReward);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (Position != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Position);
    }
    if (Reward != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(Reward);
    }
    if (TypeReward != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(TypeReward);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (Position != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Position);
    }
    if (Reward != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Reward);
    }
    if (TypeReward != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TypeReward);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(RewardTournament other) {
    if (other == null) {
      return;
    }
    if (other.Position != 0) {
      Position = other.Position;
    }
    if (other.Reward != 0L) {
      Reward = other.Reward;
    }
    if (other.TypeReward != 0) {
      TypeReward = other.TypeReward;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Position = input.ReadInt32();
          break;
        }
        case 16: {
          Reward = input.ReadInt64();
          break;
        }
        case 24: {
          TypeReward = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          Position = input.ReadInt32();
          break;
        }
        case 16: {
          Reward = input.ReadInt64();
          break;
        }
        case 24: {
          TypeReward = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

#endregion


#endregion Designer generated code
