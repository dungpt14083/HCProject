// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: DetailMiniGameProto.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from DetailMiniGameProto.proto</summary>
public static partial class DetailMiniGameProtoReflection {

  #region Descriptor
  /// <summary>File descriptor for DetailMiniGameProto.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static DetailMiniGameProtoReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChlEZXRhaWxNaW5pR2FtZVByb3RvLnByb3RvGglGZWUucHJvdG8aDFJld2Fy",
          "ZC5wcm90byLzAgoTRGV0YWlsTWluaUdhbWVQcm90bxIXCg9taW5pR2FtZUV2",
          "ZW50SWQYASABKAMSGQoRbWluaUdhbWVFdmVudE5hbWUYAiABKAkSEgoKbWlu",
          "aUdhbWVJZBgDIAEoAxIUCgxtaW5pR2FtZU5hbWUYBCABKAkSEAoIbW9kZU5h",
          "bWUYBSABKAkSEAoIbW9kZVR5cGUYBiABKAUSGwoTbWluaUdhbWVFdmVudFN0",
          "YXR1cxgHIAEoBRIdChVudW1iZXJJbk1pbmlHYW1lRXZlbnQYCCABKAUSFgoO",
          "Y29uZGl0aW9uc1R5cGUYCSABKAUSEgoKdW5kZXJMZXZlbBgKIAEoBRIRCglv",
          "dmVyTGV2ZWwYCyABKAUSFgoIZW50cnlGZWUYDCABKAsyBC5GZWUSGgoJcHJp",
          "emVQb29sGA0gASgLMgcuUmV3YXJkEhcKD2F2YWlsYWJsZVRvUGxheRgOIAEo",
          "CBISCgpmcm9tU2NyZWVuGA8gASgFIlAKF0xpc3REZXRhaWxNaW5pR2FtZVBy",
          "b3RvEjUKF2xpc3REZXRhaWxNaW5pR2FtZVByb3RvGAEgAygLMhQuRGV0YWls",
          "TWluaUdhbWVQcm90b2IGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::FeeReflection.Descriptor, global::RewardReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::DetailMiniGameProto), global::DetailMiniGameProto.Parser, new[]{ "MiniGameEventId", "MiniGameEventName", "MiniGameId", "MiniGameName", "ModeName", "ModeType", "MiniGameEventStatus", "NumberInMiniGameEvent", "ConditionsType", "UnderLevel", "OverLevel", "EntryFee", "PrizePool", "AvailableToPlay", "FromScreen" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ListDetailMiniGameProto), global::ListDetailMiniGameProto.Parser, new[]{ "ListDetailMiniGameProto_" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class DetailMiniGameProto : pb::IMessage<DetailMiniGameProto>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<DetailMiniGameProto> _parser = new pb::MessageParser<DetailMiniGameProto>(() => new DetailMiniGameProto());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<DetailMiniGameProto> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DetailMiniGameProtoReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public DetailMiniGameProto() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public DetailMiniGameProto(DetailMiniGameProto other) : this() {
    miniGameEventId_ = other.miniGameEventId_;
    miniGameEventName_ = other.miniGameEventName_;
    miniGameId_ = other.miniGameId_;
    miniGameName_ = other.miniGameName_;
    modeName_ = other.modeName_;
    modeType_ = other.modeType_;
    miniGameEventStatus_ = other.miniGameEventStatus_;
    numberInMiniGameEvent_ = other.numberInMiniGameEvent_;
    conditionsType_ = other.conditionsType_;
    underLevel_ = other.underLevel_;
    overLevel_ = other.overLevel_;
    entryFee_ = other.entryFee_ != null ? other.entryFee_.Clone() : null;
    prizePool_ = other.prizePool_ != null ? other.prizePool_.Clone() : null;
    availableToPlay_ = other.availableToPlay_;
    fromScreen_ = other.fromScreen_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public DetailMiniGameProto Clone() {
    return new DetailMiniGameProto(this);
  }

  /// <summary>Field number for the "miniGameEventId" field.</summary>
  public const int MiniGameEventIdFieldNumber = 1;
  private long miniGameEventId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long MiniGameEventId {
    get { return miniGameEventId_; }
    set {
      miniGameEventId_ = value;
    }
  }

  /// <summary>Field number for the "miniGameEventName" field.</summary>
  public const int MiniGameEventNameFieldNumber = 2;
  private string miniGameEventName_ = "";
  /// <summary>
  /// Name of mini game event name
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string MiniGameEventName {
    get { return miniGameEventName_; }
    set {
      miniGameEventName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "miniGameId" field.</summary>
  public const int MiniGameIdFieldNumber = 3;
  private long miniGameId_;
  /// <summary>
  /// Mini game id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long MiniGameId {
    get { return miniGameId_; }
    set {
      miniGameId_ = value;
    }
  }

  /// <summary>Field number for the "miniGameName" field.</summary>
  public const int MiniGameNameFieldNumber = 4;
  private string miniGameName_ = "";
  /// <summary>
  /// name mini game
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string MiniGameName {
    get { return miniGameName_; }
    set {
      miniGameName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "modeName" field.</summary>
  public const int ModeNameFieldNumber = 5;
  private string modeName_ = "";
  /// <summary>
  /// Name of mode
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string ModeName {
    get { return modeName_; }
    set {
      modeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "modeType" field.</summary>
  public const int ModeTypeFieldNumber = 6;
  private int modeType_;
  /// <summary>
  ///  type tournament , 1 -  head_to_head, 2 - knock_out, 3 -  round_robin, 4 - one_to_many
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int ModeType {
    get { return modeType_; }
    set {
      modeType_ = value;
    }
  }

  /// <summary>Field number for the "miniGameEventStatus" field.</summary>
  public const int MiniGameEventStatusFieldNumber = 7;
  private int miniGameEventStatus_;
  /// <summary>
  /// status of mini game event
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int MiniGameEventStatus {
    get { return miniGameEventStatus_; }
    set {
      miniGameEventStatus_ = value;
    }
  }

  /// <summary>Field number for the "numberInMiniGameEvent" field.</summary>
  public const int NumberInMiniGameEventFieldNumber = 8;
  private int numberInMiniGameEvent_;
  /// <summary>
  /// number player
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int NumberInMiniGameEvent {
    get { return numberInMiniGameEvent_; }
    set {
      numberInMiniGameEvent_ = value;
    }
  }

  /// <summary>Field number for the "conditionsType" field.</summary>
  public const int ConditionsTypeFieldNumber = 9;
  private int conditionsType_;
  /// <summary>
  /// loại mini game sử dụng level
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int ConditionsType {
    get { return conditionsType_; }
    set {
      conditionsType_ = value;
    }
  }

  /// <summary>Field number for the "underLevel" field.</summary>
  public const int UnderLevelFieldNumber = 10;
  private int underLevel_;
  /// <summary>
  /// dưới level   condition type 1
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int UnderLevel {
    get { return underLevel_; }
    set {
      underLevel_ = value;
    }
  }

  /// <summary>Field number for the "overLevel" field.</summary>
  public const int OverLevelFieldNumber = 11;
  private int overLevel_;
  /// <summary>
  /// trên level   condition type 2
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int OverLevel {
    get { return overLevel_; }
    set {
      overLevel_ = value;
    }
  }

  /// <summary>Field number for the "entryFee" field.</summary>
  public const int EntryFeeFieldNumber = 12;
  private global::Fee entryFee_;
  /// <summary>
  /// phí vào chơi
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::Fee EntryFee {
    get { return entryFee_; }
    set {
      entryFee_ = value;
    }
  }

  /// <summary>Field number for the "prizePool" field.</summary>
  public const int PrizePoolFieldNumber = 13;
  private global::Reward prizePool_;
  /// <summary>
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::Reward PrizePool {
    get { return prizePool_; }
    set {
      prizePool_ = value;
    }
  }

  /// <summary>Field number for the "availableToPlay" field.</summary>
  public const int AvailableToPlayFieldNumber = 14;
  private bool availableToPlay_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool AvailableToPlay {
    get { return availableToPlay_; }
    set {
      availableToPlay_ = value;
    }
  }

  /// <summary>Field number for the "fromScreen" field.</summary>
  public const int FromScreenFieldNumber = 15;
  private int fromScreen_;
  /// <summary>
  /// Từ màn hình nào 1 - Từ mini game screen ;  2 - từ màn Event
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int FromScreen {
    get { return fromScreen_; }
    set {
      fromScreen_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as DetailMiniGameProto);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(DetailMiniGameProto other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (MiniGameEventId != other.MiniGameEventId) return false;
    if (MiniGameEventName != other.MiniGameEventName) return false;
    if (MiniGameId != other.MiniGameId) return false;
    if (MiniGameName != other.MiniGameName) return false;
    if (ModeName != other.ModeName) return false;
    if (ModeType != other.ModeType) return false;
    if (MiniGameEventStatus != other.MiniGameEventStatus) return false;
    if (NumberInMiniGameEvent != other.NumberInMiniGameEvent) return false;
    if (ConditionsType != other.ConditionsType) return false;
    if (UnderLevel != other.UnderLevel) return false;
    if (OverLevel != other.OverLevel) return false;
    if (!object.Equals(EntryFee, other.EntryFee)) return false;
    if (!object.Equals(PrizePool, other.PrizePool)) return false;
    if (AvailableToPlay != other.AvailableToPlay) return false;
    if (FromScreen != other.FromScreen) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (MiniGameEventId != 0L) hash ^= MiniGameEventId.GetHashCode();
    if (MiniGameEventName.Length != 0) hash ^= MiniGameEventName.GetHashCode();
    if (MiniGameId != 0L) hash ^= MiniGameId.GetHashCode();
    if (MiniGameName.Length != 0) hash ^= MiniGameName.GetHashCode();
    if (ModeName.Length != 0) hash ^= ModeName.GetHashCode();
    if (ModeType != 0) hash ^= ModeType.GetHashCode();
    if (MiniGameEventStatus != 0) hash ^= MiniGameEventStatus.GetHashCode();
    if (NumberInMiniGameEvent != 0) hash ^= NumberInMiniGameEvent.GetHashCode();
    if (ConditionsType != 0) hash ^= ConditionsType.GetHashCode();
    if (UnderLevel != 0) hash ^= UnderLevel.GetHashCode();
    if (OverLevel != 0) hash ^= OverLevel.GetHashCode();
    if (entryFee_ != null) hash ^= EntryFee.GetHashCode();
    if (prizePool_ != null) hash ^= PrizePool.GetHashCode();
    if (AvailableToPlay != false) hash ^= AvailableToPlay.GetHashCode();
    if (FromScreen != 0) hash ^= FromScreen.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (MiniGameEventId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(MiniGameEventId);
    }
    if (MiniGameEventName.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(MiniGameEventName);
    }
    if (MiniGameId != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(MiniGameId);
    }
    if (MiniGameName.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(MiniGameName);
    }
    if (ModeName.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(ModeName);
    }
    if (ModeType != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(ModeType);
    }
    if (MiniGameEventStatus != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(MiniGameEventStatus);
    }
    if (NumberInMiniGameEvent != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(NumberInMiniGameEvent);
    }
    if (ConditionsType != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(ConditionsType);
    }
    if (UnderLevel != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(UnderLevel);
    }
    if (OverLevel != 0) {
      output.WriteRawTag(88);
      output.WriteInt32(OverLevel);
    }
    if (entryFee_ != null) {
      output.WriteRawTag(98);
      output.WriteMessage(EntryFee);
    }
    if (prizePool_ != null) {
      output.WriteRawTag(106);
      output.WriteMessage(PrizePool);
    }
    if (AvailableToPlay != false) {
      output.WriteRawTag(112);
      output.WriteBool(AvailableToPlay);
    }
    if (FromScreen != 0) {
      output.WriteRawTag(120);
      output.WriteInt32(FromScreen);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (MiniGameEventId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(MiniGameEventId);
    }
    if (MiniGameEventName.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(MiniGameEventName);
    }
    if (MiniGameId != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(MiniGameId);
    }
    if (MiniGameName.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(MiniGameName);
    }
    if (ModeName.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(ModeName);
    }
    if (ModeType != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(ModeType);
    }
    if (MiniGameEventStatus != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(MiniGameEventStatus);
    }
    if (NumberInMiniGameEvent != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(NumberInMiniGameEvent);
    }
    if (ConditionsType != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(ConditionsType);
    }
    if (UnderLevel != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(UnderLevel);
    }
    if (OverLevel != 0) {
      output.WriteRawTag(88);
      output.WriteInt32(OverLevel);
    }
    if (entryFee_ != null) {
      output.WriteRawTag(98);
      output.WriteMessage(EntryFee);
    }
    if (prizePool_ != null) {
      output.WriteRawTag(106);
      output.WriteMessage(PrizePool);
    }
    if (AvailableToPlay != false) {
      output.WriteRawTag(112);
      output.WriteBool(AvailableToPlay);
    }
    if (FromScreen != 0) {
      output.WriteRawTag(120);
      output.WriteInt32(FromScreen);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (MiniGameEventId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(MiniGameEventId);
    }
    if (MiniGameEventName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(MiniGameEventName);
    }
    if (MiniGameId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(MiniGameId);
    }
    if (MiniGameName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(MiniGameName);
    }
    if (ModeName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ModeName);
    }
    if (ModeType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ModeType);
    }
    if (MiniGameEventStatus != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MiniGameEventStatus);
    }
    if (NumberInMiniGameEvent != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumberInMiniGameEvent);
    }
    if (ConditionsType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConditionsType);
    }
    if (UnderLevel != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnderLevel);
    }
    if (OverLevel != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OverLevel);
    }
    if (entryFee_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(EntryFee);
    }
    if (prizePool_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PrizePool);
    }
    if (AvailableToPlay != false) {
      size += 1 + 1;
    }
    if (FromScreen != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FromScreen);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(DetailMiniGameProto other) {
    if (other == null) {
      return;
    }
    if (other.MiniGameEventId != 0L) {
      MiniGameEventId = other.MiniGameEventId;
    }
    if (other.MiniGameEventName.Length != 0) {
      MiniGameEventName = other.MiniGameEventName;
    }
    if (other.MiniGameId != 0L) {
      MiniGameId = other.MiniGameId;
    }
    if (other.MiniGameName.Length != 0) {
      MiniGameName = other.MiniGameName;
    }
    if (other.ModeName.Length != 0) {
      ModeName = other.ModeName;
    }
    if (other.ModeType != 0) {
      ModeType = other.ModeType;
    }
    if (other.MiniGameEventStatus != 0) {
      MiniGameEventStatus = other.MiniGameEventStatus;
    }
    if (other.NumberInMiniGameEvent != 0) {
      NumberInMiniGameEvent = other.NumberInMiniGameEvent;
    }
    if (other.ConditionsType != 0) {
      ConditionsType = other.ConditionsType;
    }
    if (other.UnderLevel != 0) {
      UnderLevel = other.UnderLevel;
    }
    if (other.OverLevel != 0) {
      OverLevel = other.OverLevel;
    }
    if (other.entryFee_ != null) {
      if (entryFee_ == null) {
        EntryFee = new global::Fee();
      }
      EntryFee.MergeFrom(other.EntryFee);
    }
    if (other.prizePool_ != null) {
      if (prizePool_ == null) {
        PrizePool = new global::Reward();
      }
      PrizePool.MergeFrom(other.PrizePool);
    }
    if (other.AvailableToPlay != false) {
      AvailableToPlay = other.AvailableToPlay;
    }
    if (other.FromScreen != 0) {
      FromScreen = other.FromScreen;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          MiniGameEventId = input.ReadInt64();
          break;
        }
        case 18: {
          MiniGameEventName = input.ReadString();
          break;
        }
        case 24: {
          MiniGameId = input.ReadInt64();
          break;
        }
        case 34: {
          MiniGameName = input.ReadString();
          break;
        }
        case 42: {
          ModeName = input.ReadString();
          break;
        }
        case 48: {
          ModeType = input.ReadInt32();
          break;
        }
        case 56: {
          MiniGameEventStatus = input.ReadInt32();
          break;
        }
        case 64: {
          NumberInMiniGameEvent = input.ReadInt32();
          break;
        }
        case 72: {
          ConditionsType = input.ReadInt32();
          break;
        }
        case 80: {
          UnderLevel = input.ReadInt32();
          break;
        }
        case 88: {
          OverLevel = input.ReadInt32();
          break;
        }
        case 98: {
          if (entryFee_ == null) {
            EntryFee = new global::Fee();
          }
          input.ReadMessage(EntryFee);
          break;
        }
        case 106: {
          if (prizePool_ == null) {
            PrizePool = new global::Reward();
          }
          input.ReadMessage(PrizePool);
          break;
        }
        case 112: {
          AvailableToPlay = input.ReadBool();
          break;
        }
        case 120: {
          FromScreen = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          MiniGameEventId = input.ReadInt64();
          break;
        }
        case 18: {
          MiniGameEventName = input.ReadString();
          break;
        }
        case 24: {
          MiniGameId = input.ReadInt64();
          break;
        }
        case 34: {
          MiniGameName = input.ReadString();
          break;
        }
        case 42: {
          ModeName = input.ReadString();
          break;
        }
        case 48: {
          ModeType = input.ReadInt32();
          break;
        }
        case 56: {
          MiniGameEventStatus = input.ReadInt32();
          break;
        }
        case 64: {
          NumberInMiniGameEvent = input.ReadInt32();
          break;
        }
        case 72: {
          ConditionsType = input.ReadInt32();
          break;
        }
        case 80: {
          UnderLevel = input.ReadInt32();
          break;
        }
        case 88: {
          OverLevel = input.ReadInt32();
          break;
        }
        case 98: {
          if (entryFee_ == null) {
            EntryFee = new global::Fee();
          }
          input.ReadMessage(EntryFee);
          break;
        }
        case 106: {
          if (prizePool_ == null) {
            PrizePool = new global::Reward();
          }
          input.ReadMessage(PrizePool);
          break;
        }
        case 112: {
          AvailableToPlay = input.ReadBool();
          break;
        }
        case 120: {
          FromScreen = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

}

public sealed partial class ListDetailMiniGameProto : pb::IMessage<ListDetailMiniGameProto>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ListDetailMiniGameProto> _parser = new pb::MessageParser<ListDetailMiniGameProto>(() => new ListDetailMiniGameProto());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ListDetailMiniGameProto> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DetailMiniGameProtoReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ListDetailMiniGameProto() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ListDetailMiniGameProto(ListDetailMiniGameProto other) : this() {
    listDetailMiniGameProto_ = other.listDetailMiniGameProto_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ListDetailMiniGameProto Clone() {
    return new ListDetailMiniGameProto(this);
  }

  /// <summary>Field number for the "listDetailMiniGameProto" field.</summary>
  public const int ListDetailMiniGameProto_FieldNumber = 1;
  private static readonly pb::FieldCodec<global::DetailMiniGameProto> _repeated_listDetailMiniGameProto_codec
      = pb::FieldCodec.ForMessage(10, global::DetailMiniGameProto.Parser);
  private readonly pbc::RepeatedField<global::DetailMiniGameProto> listDetailMiniGameProto_ = new pbc::RepeatedField<global::DetailMiniGameProto>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::DetailMiniGameProto> ListDetailMiniGameProto_ {
    get { return listDetailMiniGameProto_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ListDetailMiniGameProto);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ListDetailMiniGameProto other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!listDetailMiniGameProto_.Equals(other.listDetailMiniGameProto_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= listDetailMiniGameProto_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    listDetailMiniGameProto_.WriteTo(output, _repeated_listDetailMiniGameProto_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    listDetailMiniGameProto_.WriteTo(ref output, _repeated_listDetailMiniGameProto_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    size += listDetailMiniGameProto_.CalculateSize(_repeated_listDetailMiniGameProto_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ListDetailMiniGameProto other) {
    if (other == null) {
      return;
    }
    listDetailMiniGameProto_.Add(other.listDetailMiniGameProto_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          listDetailMiniGameProto_.AddEntriesFrom(input, _repeated_listDetailMiniGameProto_codec);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          listDetailMiniGameProto_.AddEntriesFrom(ref input, _repeated_listDetailMiniGameProto_codec);
          break;
        }
      }
    }
  }
  #endif

}

#endregion


#endregion Designer generated code
